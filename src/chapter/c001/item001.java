package chapter.c001;

/**
 * Item1. 생성자대신 정적 팩터리 메소드를 고려해라
 * - 무작정 public 생성자를 제공하는 습관은 버려라
 *
 * 장점
 * 1. 이름을 가질 수 있다
 * - 생성자만으로는 정확히 어떤 특성을 가지고 인스턴스를 생성하는지 알 수 없다.
 * - 정적 팩토리 메소드는 이름을 가지고 그 특성을 노출 할 수 있다.
 *
 * 2. 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.
 * - 불변 클래스는 인스턴스를 미리 생성하거나 캐싱하여 재활용 할 수 있다.
 * - 플라이웨이트 패턴과 비슷한 기법
 * - 인스턴스를 통제 할 수 있다.
 *
 * 3. 반환 타입의 하위 타입 객체를 반환 할 수 있는 능력이 있다.
 * - 반환할 객체의 클래스를 자유롭게 선택 할 수 있도록 해준다.
 *
 * 4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.
 * - ex) EnumSet
 *
 * 5. 정적 패토리를 작성하는 시점에 반환할 객체의 클래스가 존재하지 않아도 된다.
 *
 */
public class item001 {
    public static void main(String[] args) {
        LabTop labTop = new LabTop("model", "company");

        // 정적 팩토리 메서드를 통해서 인스턴스를 획득
        // of: 여러 매개변수를 받아서 적절한 인스턴스를 반환하는 메서드
        // MVC모델에서 dto -> entity, entity -> dto로 변경 할 때 사용
        LabTop labTop1 = LabTop.ofModelNameAndCompany("model", "company");

        // from: 하나의 매개변수를 받아서 해당 타입의 인스턴스를 반환
        // ex) dto -> entity로 변경
    }
}
